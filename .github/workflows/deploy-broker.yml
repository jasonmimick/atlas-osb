#Atlas-osb. PAS sample

on: [push]

name: Prepare CF. Base scenario.

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.28

          # Optional: working directory, useful for monorepos
          # working-directory:
          # Optional: golangci-lint command line arguments.
          # args: -issues-exit-code=0
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

  pre-ci:
    name: wait for other CI to finish
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: "Block Concurrent Executions"
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  basic-plan-cloudfoundry:
    name: basic-plan-cloudfoundry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1

      - name: Create CF org, space, broker, service and push app)
        id: prepare
        uses: ./.github/actions/e2e-cf
        with:
          pcf_url: ${{ secrets.PCF_URL }}
          pcf_user: ${{ secrets.PCF_USER }}
          pcf_password: ${{ secrets.PCF_PASSWORD }}
          atlas_project_id: ${{ secrets.ATLAS_PROJECT_ID }}
          atlas_project_id_bay: ${{ secrets.ATLAS_PROJECT_ID_BAY }}
          atlas_public_key: ${{ secrets.ATLAS_PUBLIC_KEY }}
          atlas_private_key: ${{ secrets.ATLAS_PRIVATE_KEY }}
          credhub_file: ${{ secrets.CREDHUB_FILE }}
          broker_db_connection_string: ${{ secrets.BROKER_DB_CONNECTION_STRING }}
          atlas_org_id: ${{ secrets.ATLAS_ORG_ID }}

      - name: Check application.
        id: check
        env:
          APP_URL: ${{ steps.prepare.outputs.app_url }}
        run: |
          echo "working with "$APP_URL

          # curl -H "Content-Type: application/json" -X PUT -d '{"_class":"org.cloudfoundry.samples.music.domain.Album", "artist": "Tenno", "title": "Journey", "releaseYear": "2019", "genre": "chillhop" }' $APP_URL/albums
          # result=$(curl -X GET $APP_URL/albums -s | awk '/Tenno/{print "true"}')
          # echo $result
          # if [[ -z $result ]]; then
          #   echo "FAILED. Curl check: Text is not found"
          #   exit 1
          # fi

          #for simple-app block (prepare-cf/entrypoint.sh)
          APP_URL=${APP_URL}/service/mongo/test3
          status=$(curl -s -X PUT -d '{"data":"sometest130"}' ${APP_URL})
          if [[ $status != "success" ]]; then
             echo "Error: can't perform PUT request"
             exit 1
          fi
          result=$(echo $(curl -s -X GET ${APP_URL}))
          if [ "${result}" == '{"data":"sometest130"}' ]; then
              echo "Application is working"
              echo "Cleaning data.."
              curl -X DELETE ${APP_URL}
          else
              echo "GET ${APP_URL} finished with result: ${result}"
              echo "FAILED. Application doesn't work. Can't get data from DB"
              exit 1
          fi

      - name: Cleanup ENV for current branch
        uses: ./.github/actions/cleanup-cf
        with:
          pcf_url: ${{ secrets.PCF_URL }}
          pcf_user: ${{ secrets.PCF_USER }}
          pcf_password: ${{ secrets.PCF_PASSWORD }}
